import React from 'react';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var getPercentageValue = function getPercentageValue(value, maxValue) {
  return isNaN(value) ? 0 : value / (isNaN(maxValue) ? 100 : maxValue) * 100;
};
var getLabelAlignment = function getLabelAlignment(alignment) {
  return alignment === 'right' ? 'flex-end' : alignment === 'center' ? alignment : 'flex-start';
};
var getProgressBackgroundStyle = function getProgressBackgroundStyle(backgroundType, barColor) {
  if (barColor.startsWith('#')) {
    return backgroundType === 'striped' ? {
      backgroundImage: "repeating-linear-gradient( 135deg, " + barColor + "66, " + barColor + "66 5px, " + barColor + " 5px, " + barColor + " 10px)"
    } : {
      background: barColor
    };
  }

  return {
    background: barColor
  };
};
var getDefaultOptions = function getDefaultOptions() {
  return {
    type: 'regular',
    maxValue: 100,
    containerColor: '#dddddd',
    containerStyle: 'bg',
    barColor: '#2c43ac',
    customLabel: '',
    labelVisibility: true,
    labelAlignment: 'left',
    labelColor: 'white',
    labelSize: '12px',
    height: '15px',
    borderRadius: '10px',
    stripeAnimation: false,
    stripeAnimationDuration: '10s',
    labelPosition: 'center',
    showMaxValue: false
  };
};

var getProgressBarStyles = function getProgressBarStyles(progressOptions, percentageValue) {
  var type = progressOptions.type,
      height = progressOptions.height,
      containerColor = progressOptions.containerColor,
      containerStyle = progressOptions.containerStyle,
      barColor = progressOptions.barColor,
      labelVisibility = progressOptions.labelVisibility,
      labelAlignment = progressOptions.labelAlignment,
      labelColor = progressOptions.labelColor,
      labelSize = progressOptions.labelSize,
      borderRadius = progressOptions.borderRadius,
      stripeAnimation = progressOptions.stripeAnimation,
      stripeAnimationDuration = progressOptions.stripeAnimationDuration,
      labelPosition = progressOptions.labelPosition,
      showMaxValue = progressOptions.showMaxValue;
  return {
    containerStyles: {
      height: height,
      backgroundColor: containerStyle === 'bg' ? containerColor : 'transparent',
      border: containerStyle === 'border' ? "2px solid " + containerColor : 'none',
      borderRadius: borderRadius,
      marginTop: labelPosition === 'top' ? '20px' : '5px',
      marginBottom: labelPosition === 'bottom' ? '20px' : '5px'
    },
    progressBarStyles: _extends({}, getProgressBackgroundStyle(type, barColor), {
      width: percentageValue <= 0 ? '0%' : (percentageValue > 100 ? 100 : percentageValue) + "%",
      borderRadius: borderRadius,
      animation: stripeAnimation ? "moveBG " + stripeAnimationDuration + " linear infinite" : ''
    }),
    labelStyles: {
      color: labelColor,
      justifyContent: getLabelAlignment(labelAlignment),
      fontSize: labelSize,
      display: !labelVisibility ? 'none' : 'flex',
      minWidth: showMaxValue ? '70px' : '30px',
      borderRadius: borderRadius,
      top: labelPosition === 'top' ? '-20px' : '',
      bottom: labelPosition === 'bottom' ? '-20px' : '',
      height: labelPosition === 'center' ? '100%' : ''
    }
  };
};

var ProgressBar = function ProgressBar(_ref) {
  var value = _ref.value,
      options = _ref.options;

  var progressBarOptions = _extends({}, getDefaultOptions(), options);

  var maxValue = progressBarOptions.maxValue,
      showMaxValue = progressBarOptions.showMaxValue,
      customLabel = progressBarOptions.customLabel;
  var percentageValue = getPercentageValue(value, maxValue);
  var styles = getProgressBarStyles(progressBarOptions, percentageValue);
  var containerStyles = styles.containerStyles,
      progressBarStyles = styles.progressBarStyles,
      labelStyles = styles.labelStyles;
  return React.createElement("div", {
    className: "ms-progress-wrapper_A043BXZ"
  }, React.createElement("div", {
    className: "ms-progress-container_XH4B78M",
    style: containerStyles
  }, React.createElement("div", {
    className: "ms-progress-bar_NMK78H2",
    style: progressBarStyles
  }, React.createElement("div", {
    className: "ms-progress-label_97NH7CX",
    style: labelStyles
  }, !!customLabel ? customLabel : "" + (isNaN(value) || Number(value) < 0 ? 0 : value > maxValue ? maxValue : value) + (showMaxValue ? " / " + maxValue : '') + "%"))));
};
ProgressBar.defaultProps = {
  value: 0,
  options: /*#__PURE__*/_extends({}, /*#__PURE__*/getDefaultOptions())
};

export { ProgressBar };
//# sourceMappingURL=ms-react-progress-bar.esm.js.map
