{"version":3,"file":"ms-react-progress-bar.cjs.production.min.js","sources":["../src/functions/functions.ts","../src/components/ProgressBar/ProgressBar.tsx","../src/functions/styles.ts"],"sourcesContent":["import {\r\n  AlignmentType,\r\n  BackgroundType,\r\n  IProgressOptions,\r\n} from '../models/models';\r\n\r\nexport const getPercentageValue = (value: number, maxValue: number) => {\r\n  return isNaN(value) ? 0 : (value / (isNaN(maxValue) ? 100 : maxValue)) * 100;\r\n};\r\n\r\nexport const getLabelAlignment = (alignment: AlignmentType) => {\r\n  return alignment === 'right'\r\n    ? 'flex-end'\r\n    : alignment === 'center'\r\n    ? alignment\r\n    : 'flex-start';\r\n};\r\n\r\nexport const getProgressBackgroundStyle = (\r\n  backgroundType: BackgroundType,\r\n  barColor: string\r\n): { [key: string]: string } => {\r\n  if (barColor.startsWith('#')) {\r\n    return backgroundType === 'striped'\r\n      ? {\r\n          backgroundImage: `repeating-linear-gradient( 135deg, ${barColor}66, ${barColor}66 5px, ${barColor} 5px, ${barColor} 10px)`,\r\n        }\r\n      : { background: barColor };\r\n  }\r\n  return { background: barColor };\r\n};\r\n\r\nexport const getDefaultOptions = (): IProgressOptions => ({\r\n  type: 'regular',\r\n  maxValue: 100,\r\n  containerColor: '#dddddd',\r\n  containerStyle: 'bg',\r\n  barColor: '#2c43ac',\r\n  customLabel: '',\r\n  labelVisibility: true,\r\n  labelAlignment: 'left',\r\n  labelColor: 'white',\r\n  labelSize: '12px',\r\n  height: '15px',\r\n  borderRadius: '10px',\r\n  stripeAnimation: false,\r\n  stripeAnimationDuration: '10s',\r\n  labelPosition: 'center',\r\n  showMaxValue: false,\r\n});\r\n","import React from 'react';\r\nimport { IProgressBarProps, IProgressOptions } from '../../models/models';\r\nimport {\r\n  getDefaultOptions,\r\n  getPercentageValue,\r\n} from '../../functions/functions';\r\nimport { getProgressBarStyles } from '../../functions/styles';\r\n\r\nexport const ProgressBar = ({ value, options }: IProgressBarProps) => {\r\n  const progressBarOptions: IProgressOptions = {\r\n    ...getDefaultOptions(),\r\n    ...options,\r\n  };\r\n  const { maxValue, showMaxValue, customLabel } = progressBarOptions;\r\n  const percentageValue: number = getPercentageValue(value, maxValue!);\r\n  const styles = getProgressBarStyles(progressBarOptions, percentageValue);\r\n\r\n  const { containerStyles, progressBarStyles, labelStyles } = styles;\r\n\r\n  return (\r\n    <div className=\"ms-progress-wrapper_A043BXZ\">\r\n      <div className=\"ms-progress-container_XH4B78M\" style={containerStyles}>\r\n        <div className=\"ms-progress-bar_NMK78H2\" style={progressBarStyles}>\r\n          <div className=\"ms-progress-label_97NH7CX\" style={labelStyles}>\r\n            {!!customLabel\r\n              ? customLabel\r\n              : `${\r\n                  isNaN(value) || Number(value) < 0\r\n                    ? 0\r\n                    : value > maxValue!\r\n                    ? maxValue\r\n                    : value\r\n                }${showMaxValue ? ` / ${maxValue}` : ''}%`}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nProgressBar.defaultProps = {\r\n  value: 0,\r\n  options: { ...getDefaultOptions() },\r\n};\r\n","import { IProgressOptions } from '../models/models';\r\nimport { getLabelAlignment, getProgressBackgroundStyle } from './functions';\r\n\r\nexport const getProgressBarStyles = (\r\n  progressOptions: IProgressOptions,\r\n  percentageValue: number\r\n): { [key: string]: { [key: string]: string | undefined } } => {\r\n  const {\r\n    type,\r\n    height,\r\n    containerColor,\r\n    containerStyle,\r\n    barColor,\r\n    labelVisibility,\r\n    labelAlignment,\r\n    labelColor,\r\n    labelSize,\r\n    borderRadius,\r\n    stripeAnimation,\r\n    stripeAnimationDuration,\r\n    labelPosition,\r\n    showMaxValue,\r\n  } = progressOptions;\r\n\r\n  return {\r\n    containerStyles: {\r\n      height,\r\n      backgroundColor: containerStyle === 'bg' ? containerColor : 'transparent',\r\n      border:\r\n        containerStyle === 'border' ? `2px solid ${containerColor}` : 'none',\r\n      borderRadius,\r\n      marginTop: labelPosition === 'top' ? '20px' : '5px',\r\n      marginBottom: labelPosition === 'bottom' ? '20px' : '5px',\r\n    },\r\n    progressBarStyles: {\r\n      ...getProgressBackgroundStyle(type!, barColor!),\r\n      width:\r\n        percentageValue <= 0\r\n          ? '0%'\r\n          : `${percentageValue > 100 ? 100 : percentageValue}%`,\r\n      borderRadius,\r\n      animation: stripeAnimation\r\n        ? `moveBG ${stripeAnimationDuration} linear infinite`\r\n        : '',\r\n    },\r\n    labelStyles: {\r\n      color: labelColor,\r\n      justifyContent: getLabelAlignment(labelAlignment!),\r\n      fontSize: labelSize,\r\n      display: !labelVisibility ? 'none' : 'flex',\r\n      minWidth: showMaxValue ? '70px' : '30px',\r\n      borderRadius,\r\n      top: labelPosition === 'top' ? '-20px' : '',\r\n      bottom: labelPosition === 'bottom' ? '-20px' : '',\r\n      height: labelPosition === 'center' ? '100%' : '',\r\n    },\r\n  };\r\n};\r\n"],"names":["ProgressBar","value","progressBarOptions","type","maxValue","containerColor","containerStyle","barColor","customLabel","labelVisibility","labelAlignment","labelColor","labelSize","height","borderRadius","stripeAnimation","stripeAnimationDuration","labelPosition","showMaxValue","options","styles","progressOptions","percentageValue","alignment","backgroundType","containerStyles","backgroundColor","border","marginTop","marginBottom","progressBarStyles","startsWith","backgroundImage","background","width","animation","labelStyles","color","justifyContent","fontSize","display","minWidth","top","bottom","getProgressBarStyles","isNaN","getPercentageValue","React","className","style","Number","defaultProps","getDefaultOptions"],"mappings":"+VAMO,ICEMA,EAAc,gBAAGC,IAAAA,MACtBC,ODuBkD,CACxDC,KAAM,UACNC,SAAU,IACVC,eAAgB,UAChBC,eAAgB,KAChBC,SAAU,UACVC,YAAa,GACbC,iBAAiB,EACjBC,eAAgB,OAChBC,WAAY,QACZC,UAAW,OACXC,OAAQ,OACRC,aAAc,OACdC,iBAAiB,EACjBC,wBAAyB,MACzBC,cAAe,SACfC,cAAc,KCxCqBC,SAK3Bf,EAAwCF,EAAxCE,SAAUc,EAA8BhB,EAA9BgB,aAAcV,EAAgBN,EAAhBM,YAE1BY,ECZ4B,SAClCC,EACAC,OFKgCC,EAShCC,EACAjB,EEVEF,EAYEgB,EAZFhB,eACAC,EAWEe,EAXFf,eAEAG,EASEY,EATFZ,gBACAC,EAQEW,EARFX,eACAC,EAOEU,EAPFV,WACAC,EAMES,EANFT,UACAE,EAKEO,EALFP,aACAC,EAIEM,EAJFN,gBACAC,EAGEK,EAHFL,wBACAC,EAEEI,EAFFJ,cACAC,EACEG,EADFH,mBAGK,CACLO,gBAAiB,CACfZ,OAJAQ,EAbFR,OAkBEa,gBAAoC,OAAnBpB,EAA0BD,EAAiB,cAC5DsB,OACqB,WAAnBrB,eAA2CD,EAAmB,OAChES,aAAAA,EACAc,UAA6B,QAAlBX,EAA0B,OAAS,MAC9CY,aAAgC,WAAlBZ,EAA6B,OAAS,OAEtDa,wBFfFN,EEGIH,EAdFlB,KFYFI,EEEIc,EAVFd,SFUEA,EAASwB,WAAW,MACI,YAAnBP,EACH,CACEQ,sDAAuDzB,SAAeA,aAAmBA,WAAiBA,YAI3G,CAAE0B,WAAY1B,KEOjB2B,MACEZ,GAAmB,EACf,MACGA,EAAkB,IAAM,IAAMA,OACvCR,aAAAA,EACAqB,UAAWpB,YACGC,qBACV,KAENoB,YAAa,CACXC,MAAO1B,EACP2B,gBFrC4Bf,EEqCMb,EFpCjB,UAAda,EACH,WACc,WAAdA,EACAA,EACA,cEiCAgB,SAAU3B,EACV4B,QAAU/B,EAA2B,OAAT,OAC5BgC,SAAUvB,EAAe,OAAS,OAClCJ,aAAAA,EACA4B,IAAuB,QAAlBzB,EAA0B,QAAU,GACzC0B,OAA0B,WAAlB1B,EAA6B,QAAU,GAC/CJ,OAA0B,WAAlBI,EAA6B,OAAS,KDvCnC2B,CAAqB1C,EDTJ,SAACD,EAAeG,UACzCyC,MAAM5C,GAAS,EAAKA,GAAS4C,MAAMzC,GAAY,IAAMA,GAAa,ICOzC0C,CAAmB7C,EAAOG,WAMxD2C,uBAAKC,UAAU,+BACbD,uBAAKC,UAAU,gCAAgCC,MAJS7B,EAApDK,iBAKFsB,uBAAKC,UAAU,0BAA0BC,MALa7B,EAAnCU,mBAMjBiB,uBAAKC,UAAU,4BAA4BC,MANS7B,EAAhBgB,aAO/B5B,IAGGqC,MAAM5C,IAAUiD,OAAOjD,GAAS,EAC5B,EACAA,EAAQG,EACRA,EACAH,IACHiB,QAAqBd,EAAa,aAQrDJ,EAAYmD,aAAe,CACzBlD,MAAO,EACPkB,aDV+B,iBAAyB,CACxDhB,KAAM,UACNC,SAAU,IACVC,eAAgB,UAChBC,eAAgB,KAChBC,SAAU,UACVC,YAAa,GACbC,iBAAiB,EACjBC,eAAgB,OAChBC,WAAY,QACZC,UAAW,OACXC,OAAQ,OACRC,aAAc,OACdC,iBAAiB,EACjBC,wBAAyB,MACzBC,cAAe,SACfC,cAAc,GCNAkC"}